// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: query.sql

package orm

import (
	"context"
)

const getCalendarByID = `-- name: GetCalendarByID :one
SELECT id, name_key, created_at, updated_at FROM calendar WHERE name_key = ?
`

func (q *Queries) GetCalendarByID(ctx context.Context, nameKey string) (Calendar, error) {
	row := q.db.QueryRowContext(ctx, getCalendarByID, nameKey)
	var i Calendar
	err := row.Scan(
		&i.ID,
		&i.NameKey,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const upsertCalendar = `-- name: UpsertCalendar :one
INSERT INTO calendar (
        name_key,
        created_at,
        updated_at
) VALUES (
        ?, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
) ON CONFLICT (name_key) DO UPDATE SET
        updated_at = CURRENT_TIMESTAMP
RETURNING id, name_key, created_at, updated_at
`

func (q *Queries) UpsertCalendar(ctx context.Context, nameKey string) (Calendar, error) {
	row := q.db.QueryRowContext(ctx, upsertCalendar, nameKey)
	var i Calendar
	err := row.Scan(
		&i.ID,
		&i.NameKey,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
