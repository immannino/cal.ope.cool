// Package nhl provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package nhl

import (
	"encoding/json"
	"time"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for ConferenceAbbreviation.
const (
	E   ConferenceAbbreviation = "E"
	W   ConferenceAbbreviation = "W"
	WCH ConferenceAbbreviation = "WCH"
)

// Defines values for ConferenceName.
const (
	Eastern          ConferenceName = "Eastern"
	Western          ConferenceName = "Western"
	WorldCupOfHockey ConferenceName = "World Cup of Hockey"
)

// Defines values for ConferenceShortName.
const (
	East ConferenceShortName = "East"
	WCup ConferenceShortName = "WCup"
	West ConferenceShortName = "West"
)

// Defines values for GameContentMediaMilestonesItemsType.
const (
	BROADCASTEND   GameContentMediaMilestonesItemsType = "BROADCAST_END"
	BROADCASTSTART GameContentMediaMilestonesItemsType = "BROADCAST_START"
	GOAL           GameContentMediaMilestonesItemsType = "GOAL"
	PERIODEND      GameContentMediaMilestonesItemsType = "PERIOD_END"
	PERIODSTART    GameContentMediaMilestonesItemsType = "PERIOD_START"
	SHOT           GameContentMediaMilestonesItemsType = "SHOT"
)

// Defines values for GameContentMediaMilestonesTitle.
const (
	Milestones GameContentMediaMilestonesTitle = "Milestones"
)

// Defines values for GameEditorialTokenDataType.
const (
	HyperLink  GameEditorialTokenDataType = "hyperLink"
	PlayerCard GameEditorialTokenDataType = "playerCard"
)

// Defines values for GameEditorialKeywordType.
const (
	GameEditorialKeywordTypeBodyParagraphCount         GameEditorialKeywordType = "bodyParagraphCount"
	GameEditorialKeywordTypeBodyWordCount              GameEditorialKeywordType = "bodyWordCount"
	GameEditorialKeywordTypeClobAutoTagSkipPlayerCards GameEditorialKeywordType = "clob_autoTagSkip_playerCards"
	GameEditorialKeywordTypeContent                    GameEditorialKeywordType = "content"
	GameEditorialKeywordTypeEmbeddable                 GameEditorialKeywordType = "embeddable"
	GameEditorialKeywordTypeGameId                     GameEditorialKeywordType = "gameId"
	GameEditorialKeywordTypeLanguage                   GameEditorialKeywordType = "language"
	GameEditorialKeywordTypePlayerId                   GameEditorialKeywordType = "playerId"
	GameEditorialKeywordTypePreviewParagraphCount      GameEditorialKeywordType = "previewParagraphCount"
	GameEditorialKeywordTypePreviewWordCount           GameEditorialKeywordType = "previewWordCount"
	GameEditorialKeywordTypePrimaryTag                 GameEditorialKeywordType = "primaryTag"
	GameEditorialKeywordTypeShareable                  GameEditorialKeywordType = "shareable"
	GameEditorialKeywordTypeStatsEventId               GameEditorialKeywordType = "statsEventId"
	GameEditorialKeywordTypeTeamFileCode               GameEditorialKeywordType = "teamFileCode"
	GameEditorialKeywordTypeTeamId                     GameEditorialKeywordType = "teamId"
)

// Defines values for GameHighlightPlaybacksName.
const (
	FLASH1200K640X360 GameHighlightPlaybacksName = "FLASH_1200K_640X360"
	FLASH1800K960X540 GameHighlightPlaybacksName = "FLASH_1800K_960X540"
	FLASH192K320X180  GameHighlightPlaybacksName = "FLASH_192K_320X180"
	FLASH450K400X224  GameHighlightPlaybacksName = "FLASH_450K_400X224"
	HTTPCLOUDMOBILE   GameHighlightPlaybacksName = "HTTP_CLOUD_MOBILE"
	HTTPCLOUDTABLET   GameHighlightPlaybacksName = "HTTP_CLOUD_TABLET"
	HTTPCLOUDTABLET60 GameHighlightPlaybacksName = "HTTP_CLOUD_TABLET_60"
	HTTPCLOUDWIRED    GameHighlightPlaybacksName = "HTTP_CLOUD_WIRED"
	HTTPCLOUDWIRED60  GameHighlightPlaybacksName = "HTTP_CLOUD_WIRED_60"
	HTTPCLOUDWIREDWEB GameHighlightPlaybacksName = "HTTP_CLOUD_WIRED_WEB"
)

// Defines values for GameHighlightType.
const (
	Video GameHighlightType = "video"
)

// Defines values for GameOfficialOfficialType.
const (
	Linesman GameOfficialOfficialType = "Linesman"
	Referee  GameOfficialOfficialType = "Referee"
)

// Defines values for PlayerShootsCatches.
const (
	L PlayerShootsCatches = "L"
	R PlayerShootsCatches = "R"
)

// Defines values for PlayerStatsStatsTypeDisplayName.
const (
	PlayerStatsStatsTypeDisplayNameByDayOfWeek               PlayerStatsStatsTypeDisplayName = "byDayOfWeek"
	PlayerStatsStatsTypeDisplayNameByMonth                   PlayerStatsStatsTypeDisplayName = "byMonth"
	PlayerStatsStatsTypeDisplayNameGoalsByGameSituation      PlayerStatsStatsTypeDisplayName = "goalsByGameSituation"
	PlayerStatsStatsTypeDisplayNameHomeAndAway               PlayerStatsStatsTypeDisplayName = "homeAndAway"
	PlayerStatsStatsTypeDisplayNameOnPaceRegularSeason       PlayerStatsStatsTypeDisplayName = "onPaceRegularSeason"
	PlayerStatsStatsTypeDisplayNameRegularSeasonStatRankings PlayerStatsStatsTypeDisplayName = "regularSeasonStatRankings"
	PlayerStatsStatsTypeDisplayNameStatsSingleSeason         PlayerStatsStatsTypeDisplayName = "statsSingleSeason"
	PlayerStatsStatsTypeDisplayNameVsConference              PlayerStatsStatsTypeDisplayName = "vsConference"
	PlayerStatsStatsTypeDisplayNameVsDivision                PlayerStatsStatsTypeDisplayName = "vsDivision"
	PlayerStatsStatsTypeDisplayNameVsTeam                    PlayerStatsStatsTypeDisplayName = "vsTeam"
	PlayerStatsStatsTypeDisplayNameWinLoss                   PlayerStatsStatsTypeDisplayName = "winLoss"
)

// Defines values for ScheduleGameTicketsTicketType.
const (
	Buysell           ScheduleGameTicketsTicketType = "buysell"
	ClubBuysell       ScheduleGameTicketsTicketType = "club buysell"
	ClubMobile        ScheduleGameTicketsTicketType = "club mobile"
	ClubMobileBuysell ScheduleGameTicketsTicketType = "club mobile buysell"
	ClubTicket        ScheduleGameTicketsTicketType = "club ticket"
	MobileAppTicket   ScheduleGameTicketsTicketType = "mobile app ticket"
	MobileBuysell     ScheduleGameTicketsTicketType = "mobile buysell"
	MobileTicket      ScheduleGameTicketsTicketType = "mobile ticket"
	TabletAppTicket   ScheduleGameTicketsTicketType = "tablet app ticket"
	Ticket            ScheduleGameTicketsTicketType = "ticket"
)

// Defines values for StandingsRecordsStandingsType.
const (
	StandingsRecordsStandingsTypeRegularSeason StandingsRecordsStandingsType = "regularSeason"
)

// Defines values for TeamNextGameScheduleDatesGamesStatusAbstractGameState.
const (
	Live    TeamNextGameScheduleDatesGamesStatusAbstractGameState = "Live"
	Preview TeamNextGameScheduleDatesGamesStatusAbstractGameState = "Preview"
)

// Defines values for TeamNextGameScheduleDatesGamesStatusCodedGameState.
const (
	TeamNextGameScheduleDatesGamesStatusCodedGameStateN2 TeamNextGameScheduleDatesGamesStatusCodedGameState = "2"
	TeamNextGameScheduleDatesGamesStatusCodedGameStateN3 TeamNextGameScheduleDatesGamesStatusCodedGameState = "3"
)

// Defines values for TeamNextGameScheduleDatesGamesStatusDetailedState.
const (
	InProgress TeamNextGameScheduleDatesGamesStatusDetailedState = "In Progress"
	PreGame    TeamNextGameScheduleDatesGamesStatusDetailedState = "Pre-Game"
)

// Defines values for TeamNextGameScheduleDatesGamesStatusStatusCode.
const (
	TeamNextGameScheduleDatesGamesStatusStatusCodeN2 TeamNextGameScheduleDatesGamesStatusStatusCode = "2"
	TeamNextGameScheduleDatesGamesStatusStatusCodeN3 TeamNextGameScheduleDatesGamesStatusStatusCode = "3"
)

// Defines values for TeamExpand.
const (
	TeamExpandTeamRoster           TeamExpand = "team.roster"
	TeamExpandTeamScheduleNext     TeamExpand = "team.schedule.next"
	TeamExpandTeamSchedulePrevious TeamExpand = "team.schedule.previous"
)

// Defines values for GetPlayerStatsParamsStats.
const (
	GetPlayerStatsParamsStatsByDayOfWeek               GetPlayerStatsParamsStats = "byDayOfWeek"
	GetPlayerStatsParamsStatsByMonth                   GetPlayerStatsParamsStats = "byMonth"
	GetPlayerStatsParamsStatsGoalsByGameSituation      GetPlayerStatsParamsStats = "goalsByGameSituation"
	GetPlayerStatsParamsStatsHomeAndAway               GetPlayerStatsParamsStats = "homeAndAway"
	GetPlayerStatsParamsStatsOnPaceRegularSeason       GetPlayerStatsParamsStats = "onPaceRegularSeason"
	GetPlayerStatsParamsStatsRegularSeasonStatRankings GetPlayerStatsParamsStats = "regularSeasonStatRankings"
	GetPlayerStatsParamsStatsStatsSingleSeason         GetPlayerStatsParamsStats = "statsSingleSeason"
	GetPlayerStatsParamsStatsVsConference              GetPlayerStatsParamsStats = "vsConference"
	GetPlayerStatsParamsStatsVsDivision                GetPlayerStatsParamsStats = "vsDivision"
	GetPlayerStatsParamsStatsVsTeam                    GetPlayerStatsParamsStats = "vsTeam"
	GetPlayerStatsParamsStatsWinLoss                   GetPlayerStatsParamsStats = "winLoss"
)

// Defines values for GetScheduleParamsExpand.
const (
	GetScheduleParamsExpandScheduleBrodcasts    GetScheduleParamsExpand = "schedule.brodcasts"
	GetScheduleParamsExpandScheduleLinescore    GetScheduleParamsExpand = "schedule.linescore"
	GetScheduleParamsExpandScheduleTicket       GetScheduleParamsExpand = "schedule.ticket"
	GetScheduleParamsExpandTeamSchedulePrevious GetScheduleParamsExpand = "team.schedule.previous"
)

// Defines values for GetStandingsByTypeParamsType.
const (
	GetStandingsByTypeParamsTypeByConference        GetStandingsByTypeParamsType = "byConference"
	GetStandingsByTypeParamsTypeByDivision          GetStandingsByTypeParamsType = "byDivision"
	GetStandingsByTypeParamsTypeByLeague            GetStandingsByTypeParamsType = "byLeague"
	GetStandingsByTypeParamsTypeDivisionLeaders     GetStandingsByTypeParamsType = "divisionLeaders"
	GetStandingsByTypeParamsTypePostseason          GetStandingsByTypeParamsType = "postseason"
	GetStandingsByTypeParamsTypePreseason           GetStandingsByTypeParamsType = "preseason"
	GetStandingsByTypeParamsTypeRegularSeason       GetStandingsByTypeParamsType = "regularSeason"
	GetStandingsByTypeParamsTypeWildCard            GetStandingsByTypeParamsType = "wildCard"
	GetStandingsByTypeParamsTypeWildCardWithLeaders GetStandingsByTypeParamsType = "wildCardWithLeaders"
)

// Defines values for GetTeamsParamsExpand.
const (
	GetTeamsParamsExpandTeamRoster           GetTeamsParamsExpand = "team.roster"
	GetTeamsParamsExpandTeamScheduleNext     GetTeamsParamsExpand = "team.schedule.next"
	GetTeamsParamsExpandTeamSchedulePrevious GetTeamsParamsExpand = "team.schedule.previous"
)

// Defines values for GetTeamParamsExpand.
const (
	GetTeamParamsExpandTeamRoster           GetTeamParamsExpand = "team.roster"
	GetTeamParamsExpandTeamScheduleNext     GetTeamParamsExpand = "team.schedule.next"
	GetTeamParamsExpandTeamSchedulePrevious GetTeamParamsExpand = "team.schedule.previous"
)

// Conference defines model for Conference.
type Conference struct {
	Abbreviation *ConferenceAbbreviation `json:"abbreviation,omitempty"`
	Active       *bool                   `json:"active,omitempty"`
	Id           *int                    `json:"id,omitempty"`
	Link         *string                 `json:"link,omitempty"`
	Name         *ConferenceName         `json:"name,omitempty"`
	ShortName    *ConferenceShortName    `json:"shortName,omitempty"`
}

// ConferenceAbbreviation defines model for Conference.Abbreviation.
type ConferenceAbbreviation string

// ConferenceName defines model for Conference.Name.
type ConferenceName string

// ConferenceShortName defines model for Conference.ShortName.
type ConferenceShortName string

// Conferences defines model for Conferences.
type Conferences struct {
	Copyright *string       `json:"copyright,omitempty"`
	Teams     *[]Conference `json:"teams,omitempty"`
}

// Division defines model for Division.
type Division struct {
	Abbreviation *string `json:"abbreviation,omitempty"`
	Active       *bool   `json:"active,omitempty"`
	Conference   *struct {
		Id   *int    `json:"id,omitempty"`
		Link *string `json:"link,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"conference,omitempty"`
	Id   *int    `json:"id,omitempty"`
	Link *string `json:"link,omitempty"`
	Name *string `json:"name,omitempty"`
}

// Divisions defines model for Divisions.
type Divisions struct {
	Copyright *string     `json:"copyright,omitempty"`
	Teams     *[]Division `json:"teams,omitempty"`
}

// Draft defines model for Draft.
type Draft struct {
	Copyright *string `json:"copyright,omitempty"`
	Drafts    *[]struct {
		DraftYear *int `json:"draftYear,omitempty"`
		Rounds    *[]struct {
			Picks *[]struct {
				PickInRound *int `json:"pickInRound,omitempty"`
				PickOverall *int `json:"pickOverall,omitempty"`
				Prospect    *struct {
					FullName *string `json:"fullName,omitempty"`
					Id       *int    `json:"id,omitempty"`
					Link     *string `json:"link,omitempty"`
				} `json:"prospect,omitempty"`
				Round *string `json:"round,omitempty"`
				Team  *struct {
					Id   *int    `json:"id,omitempty"`
					Link *string `json:"link,omitempty"`
					Name *string `json:"name,omitempty"`
				} `json:"team,omitempty"`
				Year *int `json:"year,omitempty"`
			} `json:"picks,omitempty"`
			Round        *int `json:"round,omitempty"`
			Roundinteger *int `json:"roundinteger,omitempty"`
		} `json:"rounds,omitempty"`
	} `json:"drafts,omitempty"`
}

// DraftProspect defines model for DraftProspect.
type DraftProspect struct {
	AmateurLeague *struct {
		Link *string `json:"link,omitempty"`
	} `json:"amateurLeague,omitempty"`
	AmateurTeam *struct {
		Link *string `json:"link,omitempty"`
	} `json:"amateurTeam,omitempty"`
	BirthCity       *string             `json:"birthCity,omitempty"`
	BirthCountry    *string             `json:"birthCountry,omitempty"`
	BirthDate       *openapi_types.Date `json:"birthDate,omitempty"`
	FirstName       *string             `json:"firstName,omitempty"`
	FullName        *string             `json:"fullName,omitempty"`
	Height          *string             `json:"height,omitempty"`
	Id              *int                `json:"id,omitempty"`
	LastName        *string             `json:"lastName,omitempty"`
	Link            *string             `json:"link,omitempty"`
	Nationality     *string             `json:"nationality,omitempty"`
	PrimaryPosition *struct {
		Abbreviation *string `json:"abbreviation,omitempty"`
		Code         *string `json:"code,omitempty"`
		Name         *string `json:"name,omitempty"`
		Type         *string `json:"type,omitempty"`
	} `json:"primaryPosition,omitempty"`
	ProspectCategory *struct {
		Id        *int    `json:"id,omitempty"`
		Name      *string `json:"name,omitempty"`
		ShortName *string `json:"shortName,omitempty"`
	} `json:"prospectCategory,omitempty"`
	Ranks         *map[string]interface{} `json:"ranks,omitempty"`
	ShootsCatches *string                 `json:"shootsCatches,omitempty"`
	Weight        *int                    `json:"weight,omitempty"`
}

// DraftProspects defines model for DraftProspects.
type DraftProspects struct {
	Copyright *string          `json:"copyright,omitempty"`
	Prospects *[]DraftProspect `json:"prospects,omitempty"`
}

// Error defines model for Error.
type Error struct {
	Message        *string `json:"message,omitempty"`
	Messageinteger *int    `json:"messageinteger,omitempty"`
}

// Franchise defines model for Franchise.
type Franchise struct {
	Id   *int    `json:"id,omitempty"`
	Link *string `json:"link,omitempty"`
	Name *string `json:"name,omitempty"`
}

// Game defines model for Game.
type Game struct {
	Copyright *string `json:"copyright,omitempty"`
	GameData  *struct {
		Datetime *struct {
			DateTime    *time.Time `json:"dateTime,omitempty"`
			EndDateTime *time.Time `json:"endDateTime,omitempty"`
		} `json:"datetime,omitempty"`
		Game *struct {
			Pk     *int    `json:"pk,omitempty"`
			Season *string `json:"season,omitempty"`
			Type   *string `json:"type,omitempty"`
		} `json:"game,omitempty"`
		Players *Player `json:"players,omitempty"`
		Status  *struct {
			AbstractGameState *string `json:"abstractGameState,omitempty"`
			CodedGameState    *string `json:"codedGameState,omitempty"`
			DetailedState     *string `json:"detailedState,omitempty"`
			StartTimeTBD      *bool   `json:"startTimeTBD,omitempty"`
			StatusCode        *string `json:"statusCode,omitempty"`
		} `json:"status,omitempty"`
		Teams *struct {
			Away *Team `json:"away,omitempty"`
			Home *Team `json:"home,omitempty"`
		} `json:"teams,omitempty"`
		Venue *struct {
			Link *string `json:"link,omitempty"`
			Name *string `json:"name,omitempty"`
		} `json:"venue,omitempty"`
	} `json:"gameData,omitempty"`
	GamePk   *int    `json:"gamePk,omitempty"`
	Link     *string `json:"link,omitempty"`
	LiveData *struct {
		Boxscore  *GameBoxscore `json:"boxscore,omitempty"`
		Decisions *struct {
			FirstStar  *GameDecisionPlayer `json:"firstStar,omitempty"`
			Loser      *GameDecisionPlayer `json:"loser,omitempty"`
			SecondStar *GameDecisionPlayer `json:"secondStar,omitempty"`
			ThirdStar  *GameDecisionPlayer `json:"thirdStar,omitempty"`
			Winner     *GameDecisionPlayer `json:"winner,omitempty"`
		} `json:"decisions,omitempty"`
		Linescore *GameLinescore `json:"linescore,omitempty"`
		Plays     *struct {
			AllPlays      *[]GamePlay `json:"allPlays,omitempty"`
			CurrentPlay   *GamePlay   `json:"currentPlay,omitempty"`
			PenaltyPlays  *[]int      `json:"penaltyPlays,omitempty"`
			PlaysByPeriod *[]struct {
				EndIndex   *int   `json:"endIndex,omitempty"`
				Plays      *[]int `json:"plays,omitempty"`
				StartIndex *int   `json:"startIndex,omitempty"`
			} `json:"playsByPeriod,omitempty"`
			ScoringPlays *[]int `json:"scoringPlays,omitempty"`
		} `json:"plays,omitempty"`
	} `json:"liveData,omitempty"`
	MetaData *struct {
		TimeStamp *string `json:"timeStamp,omitempty"`
		Wait      *int    `json:"wait,omitempty"`
	} `json:"metaData,omitempty"`
}

// GameBoxscore defines model for GameBoxscore.
type GameBoxscore struct {
	Officials *[]GameOfficial `json:"officials,omitempty"`
	Teams     *struct {
		Away *GameBoxscoreTeam `json:"away,omitempty"`
		Home *GameBoxscoreTeam `json:"home,omitempty"`
	} `json:"teams,omitempty"`
}

// GameBoxscoreTeam defines model for GameBoxscoreTeam.
type GameBoxscoreTeam struct {
	Coaches *[]struct {
		Person *struct {
			FullName *string `json:"fullName,omitempty"`
			Link     *string `json:"link,omitempty"`
		} `json:"person,omitempty"`
		Position *struct {
			Abbreviation *string `json:"abbreviation,omitempty"`
			Code         *string `json:"code,omitempty"`
			Name         *string `json:"name,omitempty"`
			Type         *string `json:"type,omitempty"`
		} `json:"position,omitempty"`
	} `json:"coaches,omitempty"`
	Goalies   *[]int `json:"goalies,omitempty"`
	OnIce     *[]int `json:"onIce,omitempty"`
	OnIcePlus *[]struct {
		PlayerId      *int `json:"playerId,omitempty"`
		ShiftDuration *int `json:"shiftDuration,omitempty"`
		Stamina       *int `json:"stamina,omitempty"`
	} `json:"onIcePlus,omitempty"`
	PenaltyBox *[]int `json:"penaltyBox,omitempty"`
	Players    *struct {
		Jerseyinteger *string `json:"jerseyinteger,omitempty"`
		Person        *struct {
			FullName      *string `json:"fullName,omitempty"`
			Id            *int    `json:"id,omitempty"`
			Link          *string `json:"link,omitempty"`
			RosterStatus  *string `json:"rosterStatus,omitempty"`
			ShootsCatches *string `json:"shootsCatches,omitempty"`
		} `json:"person,omitempty"`
		Position *struct {
			Abbreviation *string `json:"abbreviation,omitempty"`
			Code         *string `json:"code,omitempty"`
			Name         *string `json:"name,omitempty"`
			Type         *string `json:"type,omitempty"`
		} `json:"position,omitempty"`
		Stats *struct {
			SkaterStats *struct {
				Assists              *int    `json:"assists,omitempty"`
				Blocked              *int    `json:"blocked,omitempty"`
				EvenTimeOnIce        *string `json:"evenTimeOnIce,omitempty"`
				FaceOffWins          *int    `json:"faceOffWins,omitempty"`
				FaceoffTaken         *int    `json:"faceoffTaken,omitempty"`
				Giveaways            *int    `json:"giveaways,omitempty"`
				Goals                *int    `json:"goals,omitempty"`
				Hits                 *int    `json:"hits,omitempty"`
				PenaltyMinutes       *int    `json:"penaltyMinutes,omitempty"`
				PlusMinus            *int    `json:"plusMinus,omitempty"`
				PowerPlayAssists     *int    `json:"powerPlayAssists,omitempty"`
				PowerPlayGoals       *int    `json:"powerPlayGoals,omitempty"`
				PowerPlayTimeOnIce   *string `json:"powerPlayTimeOnIce,omitempty"`
				ShortHandedAssists   *int    `json:"shortHandedAssists,omitempty"`
				ShortHandedGoals     *int    `json:"shortHandedGoals,omitempty"`
				ShortHandedTimeOnIce *string `json:"shortHandedTimeOnIce,omitempty"`
				Shots                *int    `json:"shots,omitempty"`
				Takeaways            *int    `json:"takeaways,omitempty"`
				TimeOnIce            *string `json:"timeOnIce,omitempty"`
			} `json:"skaterStats,omitempty"`
		} `json:"stats,omitempty"`
	} `json:"players,omitempty"`
	Scratches *[]int `json:"scratches,omitempty"`
	Skaters   *[]int `json:"skaters,omitempty"`
	Team      *struct {
		Abbreviation *string `json:"abbreviation,omitempty"`
		Id           *int    `json:"id,omitempty"`
		Link         *string `json:"link,omitempty"`
		Name         *string `json:"name,omitempty"`
		TriCode      *string `json:"triCode,omitempty"`
	} `json:"team,omitempty"`
	TeamStats *struct {
		TeamSkaterStats *struct {
			Blocked                *int    `json:"blocked,omitempty"`
			FaceOffWinPercentage   *string `json:"faceOffWinPercentage,omitempty"`
			Giveaways              *int    `json:"giveaways,omitempty"`
			Goals                  *int    `json:"goals,omitempty"`
			Hits                   *int    `json:"hits,omitempty"`
			Pim                    *int    `json:"pim,omitempty"`
			PowerPlayGoals         *int    `json:"powerPlayGoals,omitempty"`
			PowerPlayOpportunities *int    `json:"powerPlayOpportunities,omitempty"`
			PowerPlayPercentage    *string `json:"powerPlayPercentage,omitempty"`
			Shots                  *int    `json:"shots,omitempty"`
			Takeaways              *int    `json:"takeaways,omitempty"`
		} `json:"teamSkaterStats,omitempty"`
	} `json:"teamStats,omitempty"`
}

// GameBoxscores defines model for GameBoxscores.
type GameBoxscores struct {
	Copyright *string         `json:"copyright,omitempty"`
	Officials *[]GameOfficial `json:"officials,omitempty"`
	Teams     *struct {
		Away *GameBoxscoreTeam `json:"away,omitempty"`
		Home *GameBoxscoreTeam `json:"home,omitempty"`
	} `json:"teams,omitempty"`
}

// GameContent defines model for GameContent.
type GameContent struct {
	Copyright *string `json:"copyright,omitempty"`
	Editorial *struct {
		Articles *GameEditorials `json:"articles,omitempty"`
		Preview  *GameEditorials `json:"preview,omitempty"`
		Recap    *GameEditorials `json:"recap,omitempty"`
	} `json:"editorial,omitempty"`
	GameContentHighlights *struct {
		GameCenter *GameHighlights `json:"gameCenter,omitempty"`
		Scoreboard *GameHighlights `json:"scoreboard,omitempty"`
	} `json:"highlights,omitempty"`
	Link  *string `json:"link,omitempty"`
	Media *struct {
		MediaItems *[]GameContent_Media_Epg_Item `json:"epg,omitempty"`
		Milestones *struct {
			Items *[]struct {
				Description  *string                              `json:"description,omitempty"`
				Highlight    *GameHighlight                       `json:"highlight,omitempty"`
				OrdinalNum   *string                              `json:"ordinalNum,omitempty"`
				Period       *string                              `json:"period,omitempty"`
				PeriodTime   *string                              `json:"periodTime,omitempty"`
				PlayerId     *string                              `json:"playerId,omitempty"`
				StatsEventId *string                              `json:"statsEventId,omitempty"`
				TeamId       *string                              `json:"teamId,omitempty"`
				TimeAbsolute *time.Time                           `json:"timeAbsolute,omitempty"`
				TimeOffset   *string                              `json:"timeOffset,omitempty"`
				Title        *string                              `json:"title,omitempty"`
				Type         *GameContentMediaMilestonesItemsType `json:"type,omitempty"`
			} `json:"items,omitempty"`
			StreamStart *time.Time                       `json:"streamStart,omitempty"`
			Title       *GameContentMediaMilestonesTitle `json:"title,omitempty"`
		} `json:"milestones,omitempty"`
	} `json:"media,omitempty"`
}

// GameContent_Media_Epg_Item defines model for GameContent.Media.Epg.Item.
type GameContent_Media_Epg_Item struct {
	union json.RawMessage
}

// GameContentMediaMilestonesItemsType defines model for GameContent.Media.Milestones.Items.Type.
type GameContentMediaMilestonesItemsType string

// GameContentMediaMilestonesTitle defines model for GameContent.Media.Milestones.Title.
type GameContentMediaMilestonesTitle string

// GameDecisionPlayer defines model for GameDecisionPlayer.
type GameDecisionPlayer struct {
	FullName *string `json:"fullName,omitempty"`
	Id       *int    `json:"id,omitempty"`
	Link     *string `json:"link,omitempty"`
}

// GameEditorial defines model for GameEditorial.
type GameEditorial struct {
	Approval    *string `json:"approval,omitempty"`
	Commenting  *bool   `json:"commenting,omitempty"`
	Contributor *struct {
		Contributors *[]struct {
			Name    *string `json:"name,omitempty"`
			Twitter *string `json:"twitter,omitempty"`
		} `json:"contributors,omitempty"`
		Source *string `json:"source,omitempty"`
	} `json:"contributor,omitempty"`
	DataURI         *string                 `json:"dataURI,omitempty"`
	Date            *time.Time              `json:"date,omitempty"`
	Headline        *string                 `json:"headline,omitempty"`
	Id              *string                 `json:"id,omitempty"`
	KeywordsAll     *[]GameEditorialKeyword `json:"keywordsAll,omitempty"`
	KeywordsDisplay *[]GameEditorialKeyword `json:"keywordsDisplay,omitempty"`
	Media           *struct {
		Image *Photo  `json:"image,omitempty"`
		Type  *string `json:"type,omitempty"`
	} `json:"media,omitempty"`
	Preview        *string               `json:"preview,omitempty"`
	PrimaryKeyword *GameEditorialKeyword `json:"primaryKeyword,omitempty"`
	SeoDescription *string               `json:"seoDescription,omitempty"`
	SeoKeywords    *string               `json:"seoKeywords,omitempty"`
	SeoTitle       *string               `json:"seoTitle,omitempty"`
	Slug           *string               `json:"slug,omitempty"`
	State          *string               `json:"state,omitempty"`
	Subhead        *string               `json:"subhead,omitempty"`
	Tagline        *string               `json:"tagline,omitempty"`
	TokenData      *struct {
		Href       *string                     `json:"href,omitempty"`
		HrefMobile *string                     `json:"hrefMobile,omitempty"`
		Id         *string                     `json:"id,omitempty"`
		Name       *string                     `json:"name,omitempty"`
		SeoName    *string                     `json:"seoName,omitempty"`
		TeamId     *string                     `json:"teamId,omitempty"`
		TokenGUID  *string                     `json:"tokenGUID,omitempty"`
		Type       *GameEditorialTokenDataType `json:"type,omitempty"`
	} `json:"tokenData,omitempty"`
	Type *string `json:"type,omitempty"`
	Url  *string `json:"url,omitempty"`
}

// GameEditorialTokenDataType defines model for GameEditorial.TokenData.Type.
type GameEditorialTokenDataType string

// GameEditorialKeyword defines model for GameEditorialKeyword.
type GameEditorialKeyword struct {
	DisplayName *string                   `json:"displayName,omitempty"`
	Type        *GameEditorialKeywordType `json:"type,omitempty"`
	Value       *string                   `json:"value,omitempty"`
}

// GameEditorialKeywordType defines model for GameEditorialKeyword.Type.
type GameEditorialKeywordType string

// GameEditorials defines model for GameEditorials.
type GameEditorials struct {
	Items     *[]GameEditorial `json:"items,omitempty"`
	Title     *string          `json:"title,omitempty"`
	TopicList *string          `json:"topicList,omitempty"`
}

// GameHighlight defines model for GameHighlight.
type GameHighlight struct {
	AuthFlow        *bool                   `json:"authFlow,omitempty"`
	Blurb           *string                 `json:"blurb,omitempty"`
	Date            *time.Time              `json:"date,omitempty"`
	Description     *string                 `json:"description,omitempty"`
	Duration        *string                 `json:"duration,omitempty"`
	Id              *string                 `json:"id,omitempty"`
	Image           *Photo                  `json:"image,omitempty"`
	Keywords        *[]GameEditorialKeyword `json:"keywords,omitempty"`
	MediaPlaybackId *string                 `json:"mediaPlaybackId,omitempty"`
	MediaState      *string                 `json:"mediaState,omitempty"`
	Playbacks       *[]struct {
		Height *string                     `json:"height,omitempty"`
		Name   *GameHighlightPlaybacksName `json:"name,omitempty"`
		Url    *string                     `json:"url,omitempty"`
		Width  *string                     `json:"width,omitempty"`
	} `json:"playbacks,omitempty"`
	Title *string            `json:"title,omitempty"`
	Type  *GameHighlightType `json:"type,omitempty"`
}

// GameHighlightPlaybacksName defines model for GameHighlight.Playbacks.Name.
type GameHighlightPlaybacksName string

// GameHighlightType defines model for GameHighlight.Type.
type GameHighlightType string

// GameHighlightGameCenter defines model for GameHighlightGameCenter.
type GameHighlightGameCenter struct {
	Items     *[]GameHighlight `json:"items,omitempty"`
	Title     *string          `json:"title,omitempty"`
	TopicList *string          `json:"topicList,omitempty"`
}

// GameHighlightScoreboard defines model for GameHighlightScoreboard.
type GameHighlightScoreboard struct {
	Items     *[]GameHighlight `json:"items,omitempty"`
	Title     *string          `json:"title,omitempty"`
	TopicList *string          `json:"topicList,omitempty"`
}

// GameHighlights defines model for GameHighlights.
type GameHighlights struct {
	GameCenter *GameHighlightGameCenter `json:"gameCenter,omitempty"`
	Scoreboard *GameHighlightScoreboard `json:"scoreboard,omitempty"`
}

// GameLinescore defines model for GameLinescore.
type GameLinescore struct {
	CurrentPeriod              *int    `json:"currentPeriod,omitempty"`
	CurrentPeriodOrdinal       *string `json:"currentPeriodOrdinal,omitempty"`
	CurrentPeriodTimeRemaining *string `json:"currentPeriodTimeRemaining,omitempty"`
	HasShootout                *bool   `json:"hasShootout,omitempty"`
	IntermissionInfo           *struct {
		InIntermission            *bool `json:"inIntermission,omitempty"`
		IntermissionTimeElapsed   *int  `json:"intermissionTimeElapsed,omitempty"`
		IntermissionTimeRemaining *int  `json:"intermissionTimeRemaining,omitempty"`
	} `json:"intermissionInfo,omitempty"`
	Periods       *[]GamePeriod `json:"periods,omitempty"`
	PowerPlayInfo *struct {
		InSituation            *bool `json:"inSituation,omitempty"`
		SituationTimeElapsed   *int  `json:"situationTimeElapsed,omitempty"`
		SituationTimeRemaining *int  `json:"situationTimeRemaining,omitempty"`
	} `json:"powerPlayInfo,omitempty"`
	PowerPlayStrength *string `json:"powerPlayStrength,omitempty"`
	ShootoutInfo      *struct {
		Away *struct {
			Attempts *int `json:"attempts,omitempty"`
			Scores   *int `json:"scores,omitempty"`
		} `json:"away,omitempty"`
		Home *struct {
			Attempts *int `json:"attempts,omitempty"`
			Scores   *int `json:"scores,omitempty"`
		} `json:"home,omitempty"`
	} `json:"shootoutInfo,omitempty"`
	Teams *struct {
		Away *GameLinescoreTeam `json:"away,omitempty"`
		Home *GameLinescoreTeam `json:"home,omitempty"`
	} `json:"teams,omitempty"`
}

// GameLinescoreTeam defines model for GameLinescoreTeam.
type GameLinescoreTeam struct {
	GoaliePulled *bool `json:"goaliePulled,omitempty"`
	Goals        *int  `json:"goals,omitempty"`
	NumSkaters   *int  `json:"numSkaters,omitempty"`
	PowerPlay    *bool `json:"powerPlay,omitempty"`
	ShotsOnGoal  *int  `json:"shotsOnGoal,omitempty"`
	Team         *struct {
		Abbreviation *string `json:"abbreviation,omitempty"`
		Id           *int    `json:"id,omitempty"`
		Link         *string `json:"link,omitempty"`
		Name         *string `json:"name,omitempty"`
		TriCode      *string `json:"triCode,omitempty"`
	} `json:"team,omitempty"`
}

// GameMediaAudio defines model for GameMediaAudio.
type GameMediaAudio struct {
	Items *[]struct {
		CallLetters     *string `json:"callLetters,omitempty"`
		EventId         *string `json:"eventId,omitempty"`
		FeedName        *string `json:"feedName,omitempty"`
		FreeGame        *bool   `json:"freeGame,omitempty"`
		GamePlus        *bool   `json:"gamePlus,omitempty"`
		Language        *string `json:"language,omitempty"`
		MediaFeedType   *string `json:"mediaFeedType,omitempty"`
		MediaPlaybackId *string `json:"mediaPlaybackId,omitempty"`
		MediaState      *string `json:"mediaState,omitempty"`
	} `json:"items,omitempty"`
	Title *string `json:"title,omitempty"`
}

// GameMediaNHLTV defines model for GameMediaNHLTV.
type GameMediaNHLTV struct {
	Items *[]struct {
		CallLetters     *string `json:"callLetters,omitempty"`
		EventId         *string `json:"eventId,omitempty"`
		FeedName        *string `json:"feedName,omitempty"`
		FreeGame        *bool   `json:"freeGame,omitempty"`
		GamePlus        *bool   `json:"gamePlus,omitempty"`
		Guid            *string `json:"guid,omitempty"`
		Language        *string `json:"language,omitempty"`
		MediaFeedType   *string `json:"mediaFeedType,omitempty"`
		MediaPlaybackId *string `json:"mediaPlaybackId,omitempty"`
		MediaState      *string `json:"mediaState,omitempty"`
	} `json:"items,omitempty"`
	Platform *string `json:"platform,omitempty"`
	Title    *string `json:"title,omitempty"`
}

// GameOfficial defines model for GameOfficial.
type GameOfficial struct {
	Official *struct {
		FullName *string `json:"fullName,omitempty"`
		Id       *int    `json:"id,omitempty"`
		Link     *string `json:"link,omitempty"`
	} `json:"official,omitempty"`
	OfficialType *GameOfficialOfficialType `json:"officialType,omitempty"`
}

// GameOfficialOfficialType defines model for GameOfficial.OfficialType.
type GameOfficialOfficialType string

// GamePeriod defines model for GamePeriod.
type GamePeriod struct {
	Away *struct {
		Goals       *int    `json:"goals,omitempty"`
		RinkSide    *string `json:"rinkSide,omitempty"`
		ShotsOnGoal *int    `json:"shotsOnGoal,omitempty"`
	} `json:"away,omitempty"`
	EndTime *time.Time `json:"endTime,omitempty"`
	Home    *struct {
		Goals       *int    `json:"goals,omitempty"`
		RinkSide    *string `json:"rinkSide,omitempty"`
		ShotsOnGoal *int    `json:"shotsOnGoal,omitempty"`
	} `json:"home,omitempty"`
	Num        *int       `json:"num,omitempty"`
	OrdinalNum *string    `json:"ordinalNum,omitempty"`
	PeriodType *string    `json:"periodType,omitempty"`
	StartTime  *time.Time `json:"startTime,omitempty"`
}

// GamePlay defines model for GamePlay.
type GamePlay struct {
	About *struct {
		DateTime *time.Time `json:"dateTime,omitempty"`
		EventId  *int       `json:"eventId,omitempty"`
		EventIdx *int       `json:"eventIdx,omitempty"`
		Goals    *struct {
			Away *int `json:"away,omitempty"`
			Home *int `json:"home,omitempty"`
		} `json:"goals,omitempty"`
		OrdinalNum          *string `json:"ordinalNum,omitempty"`
		Period              *int    `json:"period,omitempty"`
		PeriodTime          *string `json:"periodTime,omitempty"`
		PeriodTimeRemaining *string `json:"periodTimeRemaining,omitempty"`
		PeriodType          *string `json:"periodType,omitempty"`
	} `json:"about,omitempty"`
	Coordinates *struct {
		X *int `json:"x,omitempty"`
		Y *int `json:"y,omitempty"`
	} `json:"coordinates,omitempty"`
	Players *[]struct {
		Player *struct {
			FullName *string `json:"fullName,omitempty"`
			Id       *int    `json:"id,omitempty"`
			Link     *string `json:"link,omitempty"`
		} `json:"player,omitempty"`
		PlayerType *string `json:"playerType,omitempty"`
	} `json:"players,omitempty"`
	Result *struct {
		Description *string `json:"description,omitempty"`
		Event       *string `json:"event,omitempty"`
		EventCode   *string `json:"eventCode,omitempty"`
		EventTypeId *string `json:"eventTypeId,omitempty"`
	} `json:"result,omitempty"`
	Team *struct {
		Id      *int    `json:"id,omitempty"`
		Link    *string `json:"link,omitempty"`
		Name    *string `json:"name,omitempty"`
		TriCode *string `json:"triCode,omitempty"`
	} `json:"team,omitempty"`
}

// Photo defines model for Photo.
type Photo struct {
	AltText *string `json:"altText,omitempty"`
	Cuts    *struct {
		AspectRatio *string `json:"aspectRatio,omitempty"`
		At2x        *string `json:"at2x,omitempty"`
		At3x        *string `json:"at3x,omitempty"`
		Height      *int    `json:"height,omitempty"`
		Src         *string `json:"src,omitempty"`
		Width       *int    `json:"width,omitempty"`
	} `json:"cuts,omitempty"`
	Title *string `json:"title,omitempty"`
}

// Player defines model for Player.
type Player struct {
	Active             *bool               `json:"active,omitempty"`
	AlternateCaptain   *bool               `json:"alternateCaptain,omitempty"`
	BirthCity          *string             `json:"birthCity,omitempty"`
	BirthCountry       *string             `json:"birthCountry,omitempty"`
	BirthDate          *openapi_types.Date `json:"birthDate,omitempty"`
	BirthStateProvince *string             `json:"birthStateProvince,omitempty"`
	Captain            *bool               `json:"captain,omitempty"`
	CurrentAge         *int                `json:"currentAge,omitempty"`
	CurrentTeam        *struct {
		Id   *int    `json:"id,omitempty"`
		Link *string `json:"link,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"currentTeam,omitempty"`
	FirstName       *string `json:"firstName,omitempty"`
	FullName        *string `json:"fullName,omitempty"`
	Height          *string `json:"height,omitempty"`
	Id              *int    `json:"id,omitempty"`
	LastName        *string `json:"lastName,omitempty"`
	Link            *string `json:"link,omitempty"`
	Nationality     *string `json:"nationality,omitempty"`
	PrimaryPosition *struct {
		Abbreviation *string `json:"abbreviation,omitempty"`
		Code         *string `json:"code,omitempty"`
		Name         *string `json:"name,omitempty"`
		Type         *string `json:"type,omitempty"`
	} `json:"primaryPosition,omitempty"`
	Primaryinteger *string              `json:"primaryinteger,omitempty"`
	Rookie         *bool                `json:"rookie,omitempty"`
	RosterStatus   *string              `json:"rosterStatus,omitempty"`
	ShootsCatches  *PlayerShootsCatches `json:"shootsCatches,omitempty"`
	Weight         *int                 `json:"weight,omitempty"`
}

// PlayerShootsCatches defines model for Player.ShootsCatches.
type PlayerShootsCatches string

// PlayerStats defines model for PlayerStats.
type PlayerStats struct {
	Copyright *string `json:"copyright,omitempty"`
	Stats     *[]struct {
		Splits *[]struct {
			DayOfWeek *int  `json:"dayOfWeek,omitempty"`
			IsHome    *bool `json:"isHome,omitempty"`
			IsOT      *bool `json:"isOT,omitempty"`
			IsWin     *bool `json:"isWin,omitempty"`
			Month     *int  `json:"month,omitempty"`
			Opponent  *struct {
				Id   *int    `json:"id,omitempty"`
				Link *string `json:"link,omitempty"`
				Name *string `json:"name,omitempty"`
			} `json:"opponent,omitempty"`
			OpponentConference *struct {
				Id   *int    `json:"id,omitempty"`
				Link *string `json:"link,omitempty"`
				Name *string `json:"name,omitempty"`
			} `json:"opponentConference,omitempty"`
			OpponentDivision *struct {
				Id   *int    `json:"id,omitempty"`
				Link *string `json:"link,omitempty"`
				Name *string `json:"name,omitempty"`
			} `json:"opponentDivision,omitempty"`
			Season *string `json:"season,omitempty"`
			Stat   *struct {
				Assists                     *string `json:"assists,omitempty"`
				Blocked                     *int    `json:"blocked,omitempty"`
				EvenTimeOnIce               *int    `json:"evenTimeOnIce,omitempty"`
				EvenTimeOnIcePerGame        *string `json:"evenTimeOnIcePerGame,omitempty"`
				FaceOffPct                  *int    `json:"faceOffPct,omitempty"`
				GameWinningGoals            *int    `json:"gameWinningGoals,omitempty"`
				Games                       *int    `json:"games,omitempty"`
				Goals                       *int    `json:"goals,omitempty"`
				GoalsInFirstPeriod          *int    `json:"goalsInFirstPeriod,omitempty"`
				GoalsInSecondPeriod         *int    `json:"goalsInSecondPeriod,omitempty"`
				GoalsInThirdPeriod          *int    `json:"goalsInThirdPeriod,omitempty"`
				GoalsLeadingByOne           *int    `json:"goalsLeadingByOne,omitempty"`
				GoalsLeadingByTwo           *int    `json:"goalsLeadingByTwo,omitempty"`
				GoalsTrailingByOne          *int    `json:"goalsTrailingByOne,omitempty"`
				GoalsTrailingByThreePlus    *int    `json:"goalsTrailingByThreePlus,omitempty"`
				GoalsTrailingByTwo          *int    `json:"goalsTrailingByTwo,omitempty"`
				GoalsWhenTied               *int    `json:"goalsWhenTied,omitempty"`
				Hits                        *int    `json:"hits,omitempty"`
				OverTimeGoals               *int    `json:"overTimeGoals,omitempty"`
				PenaltyMinutes              *int    `json:"penaltyMinutes,omitempty"`
				Pim                         *int    `json:"pim,omitempty"`
				PlusMinus                   *int    `json:"plusMinus,omitempty"`
				Points                      *int    `json:"points,omitempty"`
				PowerPlayGoals              *int    `json:"powerPlayGoals,omitempty"`
				PowerPlayPoints             *int    `json:"powerPlayPoints,omitempty"`
				PowerPlayTimeOnIce          *int    `json:"powerPlayTimeOnIce,omitempty"`
				PowerPlayTimeOnIcePerGame   *string `json:"powerPlayTimeOnIcePerGame,omitempty"`
				RankAssists                 *string `json:"rankAssists,omitempty"`
				RankBlockedShots            *string `json:"rankBlockedShots,omitempty"`
				RankGamesPlayed             *string `json:"rankGamesPlayed,omitempty"`
				RankGoals                   *string `json:"rankGoals,omitempty"`
				RankHits                    *string `json:"rankHits,omitempty"`
				RankOvertimeGoals           *string `json:"rankOvertimeGoals,omitempty"`
				RankPenaltyMinutes          *string `json:"rankPenaltyMinutes,omitempty"`
				RankPlusMinus               *string `json:"rankPlusMinus,omitempty"`
				RankPoints                  *string `json:"rankPoints,omitempty"`
				RankPowerPlayGoals          *string `json:"rankPowerPlayGoals,omitempty"`
				RankShortHandedGoals        *string `json:"rankShortHandedGoals,omitempty"`
				RankShotPct                 *string `json:"rankShotPct,omitempty"`
				RankShots                   *string `json:"rankShots,omitempty"`
				Shifts                      *int    `json:"shifts,omitempty"`
				ShortHandedGoals            *int    `json:"shortHandedGoals,omitempty"`
				ShortHandedPoints           *int    `json:"shortHandedPoints,omitempty"`
				ShortHandedTimeOnIce        *string `json:"shortHandedTimeOnIce,omitempty"`
				ShortHandedTimeOnIcePerGame *string `json:"shortHandedTimeOnIcePerGame,omitempty"`
				ShotPct                     *int    `json:"shotPct,omitempty"`
				Shots                       *int    `json:"shots,omitempty"`
				TimeOnIce                   *string `json:"timeOnIce,omitempty"`
				TimeOnIcePerGame            *string `json:"timeOnIcePerGame,omitempty"`
			} `json:"stat,omitempty"`
		} `json:"splits,omitempty"`
		Type *struct {
			DisplayName *PlayerStatsStatsTypeDisplayName `json:"displayName,omitempty"`
		} `json:"type,omitempty"`
	} `json:"stats,omitempty"`
}

// PlayerStatsStatsTypeDisplayName defines model for PlayerStats.Stats.Type.DisplayName.
type PlayerStatsStatsTypeDisplayName string

// Players defines model for Players.
type Players struct {
	Copyright string    `json:"copyright"`
	Teams     *[]Player `json:"teams,omitempty"`
}

// Roster defines model for Roster.
type Roster struct {
	Jerseyinteger *int `json:"jerseyinteger,omitempty"`
	Person        *struct {
		FullName *string `json:"fullName,omitempty"`
		Id       *int    `json:"id,omitempty"`
		Link     *string `json:"link,omitempty"`
	} `json:"person,omitempty"`
	Position *struct {
		Abbreviation *string `json:"abbreviation,omitempty"`
		Code         *string `json:"code,omitempty"`
		Name         *string `json:"name,omitempty"`
		Type         *string `json:"type,omitempty"`
	} `json:"position,omitempty"`
}

// Rosters defines model for Rosters.
type Rosters struct {
	Copyright *string   `json:"copyright,omitempty"`
	Teams     *[]Roster `json:"teams,omitempty"`
}

// Schedule defines model for Schedule.
type Schedule struct {
	Copyright    *string        `json:"copyright,omitempty"`
	Dates        *[]ScheduleDay `json:"dates,omitempty"`
	TotalEvents  *int           `json:"totalEvents,omitempty"`
	TotalGames   *int           `json:"totalGames,omitempty"`
	TotalItems   *int           `json:"totalItems,omitempty"`
	TotalMatches *int           `json:"totalMatches,omitempty"`
	Wait         *int           `json:"wait,omitempty"`
}

// ScheduleDay defines model for ScheduleDay.
type ScheduleDay struct {
	Date         *openapi_types.Date       `json:"date,omitempty"`
	Events       *[]map[string]interface{} `json:"events,omitempty"`
	Games        *[]ScheduleGame           `json:"games,omitempty"`
	Matches      *[]map[string]interface{} `json:"matches,omitempty"`
	TotalEvents  *int                      `json:"totalEvents,omitempty"`
	TotalGames   *int                      `json:"totalGames,omitempty"`
	TotalItems   *int                      `json:"totalItems,omitempty"`
	TotalMatches *int                      `json:"totalMatches,omitempty"`
}

// ScheduleGame defines model for ScheduleGame.
type ScheduleGame struct {
	Content *struct {
		Link *string `json:"link,omitempty"`
	} `json:"content,omitempty"`
	GameDate  *time.Time     `json:"gameDate,omitempty"`
	GamePk    *int           `json:"gamePk,omitempty"`
	GameType  *string        `json:"gameType,omitempty"`
	Linescore *GameLinescore `json:"linescore,omitempty"`
	Link      *string        `json:"link,omitempty"`
	Season    *string        `json:"season,omitempty"`
	Status    *struct {
		AbstractGameState *string `json:"abstractGameState,omitempty"`
		CodedGameState    *string `json:"codedGameState,omitempty"`
		DetailedState     *string `json:"detailedState,omitempty"`
		StartTimeTBD      *bool   `json:"startTimeTBD,omitempty"`
		StatusCode        *string `json:"statusCode,omitempty"`
	} `json:"status,omitempty"`
	Teams *struct {
		Away *struct {
			LeagueRecord *struct {
				Losses *int    `json:"losses,omitempty"`
				Ot     *int    `json:"ot,omitempty"`
				Type   *string `json:"type,omitempty"`
				Wins   *int    `json:"wins,omitempty"`
			} `json:"leagueRecord,omitempty"`
			Score *int `json:"score,omitempty"`
			Team  *struct {
				Id   *int    `json:"id,omitempty"`
				Link *string `json:"link,omitempty"`
				Name *string `json:"name,omitempty"`
			} `json:"team,omitempty"`
		} `json:"away,omitempty"`
		Home *struct {
			LeagueRecord *struct {
				Losses *int    `json:"losses,omitempty"`
				Ot     *int    `json:"ot,omitempty"`
				Type   *string `json:"type,omitempty"`
				Wins   *int    `json:"wins,omitempty"`
			} `json:"leagueRecord,omitempty"`
			Score *int `json:"score,omitempty"`
			Team  *struct {
				Id   *int    `json:"id,omitempty"`
				Link *string `json:"link,omitempty"`
				Name *string `json:"name,omitempty"`
			} `json:"team,omitempty"`
		} `json:"home,omitempty"`
	} `json:"teams,omitempty"`
	Tickets *[]struct {
		TicketLink *string                        `json:"ticketLink,omitempty"`
		TicketType *ScheduleGameTicketsTicketType `json:"ticketType,omitempty"`
	} `json:"tickets,omitempty"`
	Venue *struct {
		Link *string `json:"link,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"venue,omitempty"`
}

// ScheduleGameTicketsTicketType defines model for ScheduleGame.Tickets.TicketType.
type ScheduleGameTicketsTicketType string

// StandingTypes defines model for StandingTypes.
type StandingTypes = interface{}

// Standings defines model for Standings.
type Standings struct {
	Copyright *string `json:"copyright,omitempty"`
	Records   *[]struct {
		Conference *struct {
			Id   *int    `json:"id,omitempty"`
			Link *string `json:"link,omitempty"`
			Name *string `json:"name,omitempty"`
		} `json:"conference,omitempty"`
		Division *struct {
			Id   *int    `json:"id,omitempty"`
			Link *string `json:"link,omitempty"`
			Name *string `json:"name,omitempty"`
		} `json:"division,omitempty"`
		League *struct {
			Id   *int    `json:"id,omitempty"`
			Link *string `json:"link,omitempty"`
			Name *string `json:"name,omitempty"`
		} `json:"league,omitempty"`
		StandingsType *StandingsRecordsStandingsType `json:"standingsType,omitempty"`
		TeamRecords   *[]struct {
			ConferenceRank *string    `json:"conferenceRank,omitempty"`
			DivisionRank   *string    `json:"divisionRank,omitempty"`
			GamesPlayed    *int       `json:"gamesPlayed,omitempty"`
			GoalsAgainst   *int       `json:"goalsAgainst,omitempty"`
			GoalsScored    *int       `json:"goalsScored,omitempty"`
			LastUpdated    *time.Time `json:"lastUpdated,omitempty"`
			LeagueRank     *string    `json:"leagueRank,omitempty"`
			LeagueRecord   *struct {
				Losses *int    `json:"losses,omitempty"`
				Ot     *int    `json:"ot,omitempty"`
				Type   *string `json:"type,omitempty"`
				Wins   *int    `json:"wins,omitempty"`
			} `json:"leagueRecord,omitempty"`
			Points *int `json:"points,omitempty"`
			Row    *int `json:"row,omitempty"`
			Streak *struct {
				StreakCode    *string `json:"streakCode,omitempty"`
				StreakType    *string `json:"streakType,omitempty"`
				Streakinteger *int    `json:"streakinteger,omitempty"`
			} `json:"streak,omitempty"`
			Team *struct {
				Id   *int    `json:"id,omitempty"`
				Link *string `json:"link,omitempty"`
				Name *string `json:"name,omitempty"`
			} `json:"team,omitempty"`
			WildCardRank *string `json:"wildCardRank,omitempty"`
		} `json:"teamRecords,omitempty"`
	} `json:"records,omitempty"`
}

// StandingsRecordsStandingsType defines model for Standings.Records.StandingsType.
type StandingsRecordsStandingsType string

// StatTypes defines model for StatTypes.
type StatTypes = interface{}

// Team defines model for Team.
type Team struct {
	Abbreviation *string `json:"abbreviation,omitempty"`
	Active       *bool   `json:"active,omitempty"`
	Conference   *struct {
		Id   *int    `json:"id,omitempty"`
		Link *string `json:"link,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"conference,omitempty"`
	Division *struct {
		Id   *int    `json:"id,omitempty"`
		Link *string `json:"link,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"division,omitempty"`
	FirstYearOfPlay  *string    `json:"firstYearOfPlay,omitempty"`
	Franchise        *Franchise `json:"franchise,omitempty"`
	FranchiseId      *int       `json:"franchiseId,omitempty"`
	Id               *int       `json:"id,omitempty"`
	Link             *string    `json:"link,omitempty"`
	LocationName     *string    `json:"locationName,omitempty"`
	Name             *string    `json:"name,omitempty"`
	NextGameSchedule *struct {
		Dates *[]struct {
			Date   *openapi_types.Date       `json:"date,omitempty"`
			Events *[]map[string]interface{} `json:"events,omitempty"`
			Games  *[]struct {
				Content *struct {
					Link *string `json:"link,omitempty"`
				} `json:"content,omitempty"`
				GameDate *time.Time `json:"gameDate,omitempty"`
				GamePk   *int       `json:"gamePk,omitempty"`
				GameType *string    `json:"gameType,omitempty"`
				Link     *string    `json:"link,omitempty"`
				Season   *string    `json:"season,omitempty"`
				Status   *struct {
					AbstractGameState *TeamNextGameScheduleDatesGamesStatusAbstractGameState `json:"abstractGameState,omitempty"`
					CodedGameState    *TeamNextGameScheduleDatesGamesStatusCodedGameState    `json:"codedGameState,omitempty"`
					DetailedState     *TeamNextGameScheduleDatesGamesStatusDetailedState     `json:"detailedState,omitempty"`
					StartTimeTBD      *bool                                                  `json:"startTimeTBD,omitempty"`
					StatusCode        *TeamNextGameScheduleDatesGamesStatusStatusCode        `json:"statusCode,omitempty"`
				} `json:"status,omitempty"`
				Teams *struct {
					Away *struct {
						LeagueRecord *struct {
							Losses *int    `json:"losses,omitempty"`
							Ot     *int    `json:"ot,omitempty"`
							Type   *string `json:"type,omitempty"`
							Wins   *int    `json:"wins,omitempty"`
						} `json:"leagueRecord,omitempty"`
						Score *int `json:"score,omitempty"`
						Team  *struct {
							Id   *int    `json:"id,omitempty"`
							Link *string `json:"link,omitempty"`
							Name *string `json:"name,omitempty"`
						} `json:"team,omitempty"`
					} `json:"away,omitempty"`
					Home *struct {
						LeagueRecord *struct {
							Losses *int    `json:"losses,omitempty"`
							Ot     *int    `json:"ot,omitempty"`
							Type   *string `json:"type,omitempty"`
							Wins   *int    `json:"wins,omitempty"`
						} `json:"leagueRecord,omitempty"`
						Score *int `json:"score,omitempty"`
						Team  *struct {
							Id   *int    `json:"id,omitempty"`
							Link *string `json:"link,omitempty"`
							Name *string `json:"name,omitempty"`
						} `json:"team,omitempty"`
					} `json:"home,omitempty"`
				} `json:"teams,omitempty"`
				Venue *struct {
					Link *string `json:"link,omitempty"`
					Name *string `json:"name,omitempty"`
				} `json:"venue,omitempty"`
			} `json:"games,omitempty"`
			Matches      *[]map[string]interface{} `json:"matches,omitempty"`
			TotalEvents  *int                      `json:"totalEvents,omitempty"`
			TotalGames   *int                      `json:"totalGames,omitempty"`
			TotalItems   *int                      `json:"totalItems,omitempty"`
			TotalMatches *int                      `json:"totalMatches,omitempty"`
		} `json:"dates,omitempty"`
		TotalEvents  *int `json:"totalEvents,omitempty"`
		TotalGames   *int `json:"totalGames,omitempty"`
		TotalItems   *int `json:"totalItems,omitempty"`
		TotalMatches *int `json:"totalMatches,omitempty"`
	} `json:"nextGameSchedule,omitempty"`
	OfficialSiteUrl *string `json:"officialSiteUrl,omitempty"`
	Roster          *struct {
		Roster *[]Roster `json:"roster,omitempty"`
	} `json:"roster,omitempty"`
	ShortName *string `json:"shortName,omitempty"`
	TeamName  *string `json:"teamName,omitempty"`
	TriCode   *string `json:"triCode,omitempty"`
	Venue     *Venue  `json:"venue,omitempty"`
}

// TeamNextGameScheduleDatesGamesStatusAbstractGameState defines model for Team.NextGameSchedule.Dates.Games.Status.AbstractGameState.
type TeamNextGameScheduleDatesGamesStatusAbstractGameState string

// TeamNextGameScheduleDatesGamesStatusCodedGameState defines model for Team.NextGameSchedule.Dates.Games.Status.CodedGameState.
type TeamNextGameScheduleDatesGamesStatusCodedGameState string

// TeamNextGameScheduleDatesGamesStatusDetailedState defines model for Team.NextGameSchedule.Dates.Games.Status.DetailedState.
type TeamNextGameScheduleDatesGamesStatusDetailedState string

// TeamNextGameScheduleDatesGamesStatusStatusCode defines model for Team.NextGameSchedule.Dates.Games.Status.StatusCode.
type TeamNextGameScheduleDatesGamesStatusStatusCode string

// TeamStats defines model for TeamStats.
type TeamStats struct {
	Copyright *string `json:"copyright,omitempty"`
	Stats     *[]struct {
		Splits *[]struct {
			Stat *struct {
				EvGGARatio             *int    `json:"evGGARatio,omitempty"`
				FaceOffWinPercentage   *string `json:"faceOffWinPercentage,omitempty"`
				FaceOffsLost           *int    `json:"faceOffsLost,omitempty"`
				FaceOffsTaken          *int    `json:"faceOffsTaken,omitempty"`
				FaceOffsWon            *int    `json:"faceOffsWon,omitempty"`
				GamesPlayed            *int    `json:"gamesPlayed,omitempty"`
				GoalsAgainstPerGame    *int    `json:"goalsAgainstPerGame,omitempty"`
				GoalsPerGame           *int    `json:"goalsPerGame,omitempty"`
				Losses                 *int    `json:"losses,omitempty"`
				Ot                     *int    `json:"ot,omitempty"`
				PenaltyKillPercentage  *string `json:"penaltyKillPercentage,omitempty"`
				PowerPlayGoals         *int    `json:"powerPlayGoals,omitempty"`
				PowerPlayGoalsAgainst  *int    `json:"powerPlayGoalsAgainst,omitempty"`
				PowerPlayOpportunities *int    `json:"powerPlayOpportunities,omitempty"`
				PowerPlayPercentage    *string `json:"powerPlayPercentage,omitempty"`
				PtPctg                 *string `json:"ptPctg,omitempty"`
				Pts                    *int    `json:"pts,omitempty"`
				SavePctg               *int    `json:"savePctg,omitempty"`
				ShootingPctg           *int    `json:"shootingPctg,omitempty"`
				ShotsAllowed           *int    `json:"shotsAllowed,omitempty"`
				ShotsPerGame           *int    `json:"shotsPerGame,omitempty"`
				WinLeadFirstPer        *int    `json:"winLeadFirstPer,omitempty"`
				WinLeadSecondPer       *int    `json:"winLeadSecondPer,omitempty"`
				WinOppScoreFirst       *int    `json:"winOppScoreFirst,omitempty"`
				WinOutshootOpp         *int    `json:"winOutshootOpp,omitempty"`
				WinOutshotByOpp        *int    `json:"winOutshotByOpp,omitempty"`
				WinScoreFirst          *int    `json:"winScoreFirst,omitempty"`
				Wins                   *int    `json:"wins,omitempty"`
			} `json:"stat,omitempty"`
			Team *struct {
				Id   *int    `json:"id,omitempty"`
				Link *string `json:"link,omitempty"`
				Name *string `json:"name,omitempty"`
			} `json:"team,omitempty"`
		} `json:"splits,omitempty"`
		Type *struct {
			DisplayName *string `json:"displayName,omitempty"`
		} `json:"type,omitempty"`
	} `json:"stats,omitempty"`
}

// Teams defines model for Teams.
type Teams struct {
	Copyright *string `json:"copyright,omitempty"`
	Teams     *[]Team `json:"teams,omitempty"`
}

// Venue defines model for Venue.
type Venue struct {
	City     *string `json:"city,omitempty"`
	Link     *string `json:"link,omitempty"`
	Name     *string `json:"name,omitempty"`
	TimeZone *struct {
		Id     *string `json:"id,omitempty"`
		Offset *int    `json:"offset,omitempty"`
		Tz     *string `json:"tz,omitempty"`
	} `json:"timeZone,omitempty"`
}

// GameId defines model for gameId.
type GameId = int

// PlayerId defines model for playerId.
type PlayerId = int

// Season defines model for season.
type Season = int

// TeamExpand defines model for teamExpand.
type TeamExpand string

// GetGameDiffParams defines parameters for GetGameDiff.
type GetGameDiffParams struct {
	// StartTimeCode The prospect ID.
	StartTimeCode string `form:"startTimeCode" json:"startTimeCode"`
}

// GetPlayerStatsParams defines parameters for GetPlayerStats.
type GetPlayerStatsParams struct {
	// Stats Stats explanations:
	//   * `homeAndAway` - Provides a split between home and away games.
	//   * `byMonth` - Monthly split of stats.
	//   * `byDayOfWeek` - Split done by day of the week.
	//   * `goalsByGameSituation` - Shows integer on when goals for a player happened like how many in the shootout, how many in each period, etc.
	//   * `onPaceRegularSeason` - This only works with the current in-progress season and shows projected totals based on current onPaceRegularSeason.
	//   * `regularSeasonStatRankings` - Returns where someone stands vs the rest of the league for a specific regularSeasonStatRankings
	//   * `statsSingleSeason` - Obtains single season statistics for a player.
	//   * `vsConference` - Conference stats split.
	//   * `vsDivision` - Division stats split.
	//   * `vsTeam` - Conference stats split.
	//   * `winLoss` - Very similar to the previous modifier except it provides the W/L/OT split instead of Home and Away.
	Stats GetPlayerStatsParamsStats `form:"stats" json:"stats"`

	// Season Return a team's specific season.
	Season *Season `form:"season,omitempty" json:"season,omitempty"`
}

// GetPlayerStatsParamsStats defines parameters for GetPlayerStats.
type GetPlayerStatsParamsStats string

// GetScheduleParams defines parameters for GetSchedule.
type GetScheduleParams struct {
	// Expand Expand explanations:
	//   * `schedule.brodcasts` - Shows the broadcasts of the game.
	//   * `schedule.linescore` - Linescore for completed games.
	//   * `schedule.ticket` - Provides the different places to buy tickets for the upcoming games.
	//   * `team.schedule.previous` - Same as above but for the last game played.
	Expand *GetScheduleParamsExpand `form:"expand,omitempty" json:"expand,omitempty"`

	// TeamId Limit results to a specific team. Team ids can be found through the teams endpoint
	TeamId *string `form:"teamId,omitempty" json:"teamId,omitempty"`

	// StartDate Start date for the search.
	StartDate *openapi_types.Date `form:"startDate,omitempty" json:"startDate,omitempty"`

	// EndDate End date for the search.
	EndDate *openapi_types.Date `form:"endDate,omitempty" json:"endDate,omitempty"`
}

// GetScheduleParamsExpand defines parameters for GetSchedule.
type GetScheduleParamsExpand string

// GetStandingsParams defines parameters for GetStandings.
type GetStandingsParams struct {
	// Season Standings for a specified season.
	Season *openapi_types.Date `form:"season,omitempty" json:"season,omitempty"`

	// Date Standings on a specified date.
	Date *openapi_types.Date `form:"date,omitempty" json:"date,omitempty"`
}

// GetStandingsByTypeParamsType defines parameters for GetStandingsByType.
type GetStandingsByTypeParamsType string

// GetTeamsParams defines parameters for GetTeams.
type GetTeamsParams struct {
	// Expand Expand your response for some additional data.
	Expand *GetTeamsParamsExpand `form:"expand,omitempty" json:"expand,omitempty"`

	// Season Return a team's specific season.
	Season *Season `form:"season,omitempty" json:"season,omitempty"`
}

// GetTeamsParamsExpand defines parameters for GetTeams.
type GetTeamsParamsExpand string

// GetTeamParams defines parameters for GetTeam.
type GetTeamParams struct {
	// Expand Expand your response for some additional data.
	Expand *GetTeamParamsExpand `form:"expand,omitempty" json:"expand,omitempty"`

	// Season Return a team's specific season.
	Season *Season `form:"season,omitempty" json:"season,omitempty"`
}

// GetTeamParamsExpand defines parameters for GetTeam.
type GetTeamParamsExpand string

// GetTeamRosterParams defines parameters for GetTeamRoster.
type GetTeamRosterParams struct {
	// Season Return a team's specific season.
	Season *Season `form:"season,omitempty" json:"season,omitempty"`
}

// AsGameMediaNHLTV returns the union data inside the GameContent_Media_Epg_Item as a GameMediaNHLTV
func (t GameContent_Media_Epg_Item) AsGameMediaNHLTV() (GameMediaNHLTV, error) {
	var body GameMediaNHLTV
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGameMediaNHLTV overwrites any union data inside the GameContent_Media_Epg_Item as the provided GameMediaNHLTV
func (t *GameContent_Media_Epg_Item) FromGameMediaNHLTV(v GameMediaNHLTV) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGameMediaNHLTV performs a merge with any union data inside the GameContent_Media_Epg_Item, using the provided GameMediaNHLTV
func (t *GameContent_Media_Epg_Item) MergeGameMediaNHLTV(v GameMediaNHLTV) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsGameMediaAudio returns the union data inside the GameContent_Media_Epg_Item as a GameMediaAudio
func (t GameContent_Media_Epg_Item) AsGameMediaAudio() (GameMediaAudio, error) {
	var body GameMediaAudio
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGameMediaAudio overwrites any union data inside the GameContent_Media_Epg_Item as the provided GameMediaAudio
func (t *GameContent_Media_Epg_Item) FromGameMediaAudio(v GameMediaAudio) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGameMediaAudio performs a merge with any union data inside the GameContent_Media_Epg_Item, using the provided GameMediaAudio
func (t *GameContent_Media_Epg_Item) MergeGameMediaAudio(v GameMediaAudio) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsGameHighlightScoreboard returns the union data inside the GameContent_Media_Epg_Item as a GameHighlightScoreboard
func (t GameContent_Media_Epg_Item) AsGameHighlightScoreboard() (GameHighlightScoreboard, error) {
	var body GameHighlightScoreboard
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGameHighlightScoreboard overwrites any union data inside the GameContent_Media_Epg_Item as the provided GameHighlightScoreboard
func (t *GameContent_Media_Epg_Item) FromGameHighlightScoreboard(v GameHighlightScoreboard) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGameHighlightScoreboard performs a merge with any union data inside the GameContent_Media_Epg_Item, using the provided GameHighlightScoreboard
func (t *GameContent_Media_Epg_Item) MergeGameHighlightScoreboard(v GameHighlightScoreboard) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t GameContent_Media_Epg_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *GameContent_Media_Epg_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}
